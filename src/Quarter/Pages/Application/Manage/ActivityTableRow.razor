@using Quarter.Components
@using Quarter.Core.Utils
@using Quarter.State
@using Quarter.State.ViewModels

<tr class="q-activity-table" test="activity">
    <td class="q-activity-marker-column">
        <ActivityMarker Activity="Activity" />
    </td>
    <td class="q-activity-name-column" test="activity-name">
        @if (Activity?.IsArchived == true)
        {
            <span class="q-tag" test="archived-tag">Archived</span>
        }
    </td>
    <td test="activity-usage">@Activity?.TotalMinutes.MinutesAsHours() h</td>
    <td class="q-activity-action-column">
        <ContextMenu Items="_menuItems" ItemSelected="OnMenuItem" />
    </td>
</tr>

@inherits Quarter.Core.UI.Components.QuarterComponent<Quarter.State.ApplicationState>

@code {
    [Parameter]
    public ActivityViewModel? Activity { get; set; }

    private readonly List<ContextMenu.MenuItemVm> _menuItems = new List<ContextMenu.MenuItemVm>
    {
        new("edit", "Edit activity"),
        new("archive", "Archive activity"),
        new("remove", "Remove activity"),
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateArchiveRestoreMenuItems();
    }

    private async Task OnMenuItem(ContextMenu.MenuItemVm item)
    {
        var res = item.Type switch {
               "edit" => DispatchAsync(new ShowEditActivityAction(Activity!.ProjectId, Activity!.Id)),
            "archive" => DispatchAsync(new ShowArchiveActivityAction(Activity!.Id)),
            "restore" => DispatchAsync(new ShowRestoreActivityAction(Activity!.Id)),
                    _ => DispatchAsync(new ShowRemoveActivityAction(Activity!.Id))
        };

        await res;
    }

    private void UpdateArchiveRestoreMenuItems()
    {
        if (Activity is null) return;

        var menuItem = Activity.IsArchived
            ? new ContextMenu.MenuItemVm("restore", "Restore activity")
            : new ContextMenu.MenuItemVm("archive", "Archive activity");
        _menuItems.RemoveAt(1);
        _menuItems.Insert(1, menuItem);
    }
}