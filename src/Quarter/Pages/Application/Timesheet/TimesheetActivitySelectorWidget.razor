<div class="q-grouped-content">
    <div class="q-list">
        <div class="q-list-item @(_isActive ? "q-list-item--expanded" : "")" >
            <div class="q-list-item__header" @onclick="@ToggleActive">
                <div class="q-activity-list--header">Current activity:</div>
                <div class="q-activity-marker">
                    @{
                        var selectedActivity = SelectedActivity();
                        if (selectedActivity is not null)
                        {
                            <ActivityMarker Activity="selectedActivity"/>
                        }
                        else
                        {
                            <div class="q-activity-marker">
                                <div class="q-activity-marker--color"
                                     test="activity-item-marker--color">
                                    <svg class="q-icon">
                                        <use xlink:href="#icon-trash"></use>
                                    </svg>
                                </div>
                                <div class="q-activity-marker--title" test="activity-item-title">Erase activity</div>
                            </div>
                        }
                    }
                </div>

            </div>
            <div class="q-list-item__content q-activity-list @(_isActive ? "qa-is-active" : "")">
                @foreach (var project in Projects())
                {
                    @if (project.IsArchived) continue;
                    @if (project.AllActivitiesAreArchived) continue;

                    <div class="q-activity-list--project" test="project-item">@project.Name</div>

                    <ul class="q-activity-list--activities">
                        @foreach (var activity in project.Activities)
                        {
                            @if (activity.IsArchived) continue;

                            <li @onclick="(() => SelectActivity(project.Id, activity.Id))"
                                class="@(IsActivitySelected(activity.Id) ? "qa-is-active" : "")"
                                test="activity-item">
                                <ActivityMarker Activity="activity" />
                            </li>
                        }
                    </ul>
                }

                <ul class="q-activity-list--activities">
                    <li @onclick="SelectEraser"
                        class="@(State?.SelectedActivity is null ? "qa-is-active" : "")"
                        test="erase-item">
                        <div class="q-activity-marker">
                            <div class="q-activity-marker--color"
                                 test="activity-item-marker--color">
                                <svg class="q-icon">
                                    <use xlink:href="#icon-trash"></use>
                                </svg>
                            </div>
                            <div class="q-activity-marker--title" test="activity-item-title">Erase activity</div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

@using Quarter.Components
@using Quarter.Core.Models
@using Quarter.State
@using Quarter.State.ViewModels

@inherits Quarter.Core.UI.Components.QuarterComponent<Quarter.State.ApplicationState>

@code {
    // The mobile view / toggle is not unit-tested!

    private bool _isActive = false;

    private ActivityViewModel? SelectedActivity()
        => State?.GetSelectedActivity();

    private IEnumerable<ProjectViewModel> Projects()
    {
        var projects = State?.Projects ?? new List<ProjectViewModel>();
        return projects.Where(p => p.Activities.Any());
    }

    private bool IsActivitySelected(IdOf<Activity> activityId)
        => activityId.Equals(State?.SelectedActivity?.ActivityId);

    private Task SelectActivity(IdOf<Project> projectId, IdOf<Activity> activityId)
    {
        _isActive = false;
        return DispatchAsync(new SelectActivityAction(new SelectedActivity(projectId, activityId)));
    }

    private Task SelectEraser()
    {
        _isActive = false;
        return DispatchAsync(new SelectEraseActivityAction());
    }

    private void ToggleActive()
        => _isActive = !_isActive;
}